// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';


var pi = Math.acos(-1);

function distance(param, param$1) {
  return Math.sqrt(Math.pow(param[0] - param$1[0], 2) + Math.pow(param[1] - param$1[1], 2));
}

function normalize(param) {
  var v2 = param[1];
  var v1 = param[0];
  var d = distance(/* tuple */[
        v1,
        v2
      ], /* tuple */[
        0,
        0
      ]);
  if (d !== 0) {
    return /* tuple */[
            v1 / d,
            v2 / d
          ];
  } else {
    return /* tuple */[
            v1,
            v2
          ];
  }
}

function inverseOfPoint(param, param$1) {
  var centre = param[/* centre */0];
  var c2 = centre[1];
  var c1 = centre[0];
  var p2 = param$1[1];
  var p1 = param$1[0];
  var inverseDistance = Math.pow(param[/* radius */1], 2) / distance(/* tuple */[
        c1,
        c2
      ], /* tuple */[
        p1,
        p2
      ]);
  var match = normalize(/* tuple */[
        p1 - c1,
        p2 - c2
      ]);
  return /* tuple */[
          match[0] * inverseDistance + c1,
          match[1] * inverseDistance + c2
        ];
}

exports.pi = pi;
exports.distance = distance;
exports.normalize = normalize;
exports.inverseOfPoint = inverseOfPoint;
/* pi Not a pure module */
