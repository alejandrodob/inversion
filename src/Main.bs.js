// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Draw$Inversion = require("./Draw.bs.js");
var DomUtils$Inversion = require("./DomUtils.bs.js");
var Geometry$Inversion = require("./Geometry.bs.js");

var canvas = document.getElementById("screen");

var canvasWidth = canvas.width;

var canvasHeight = canvas.height;

var screen = canvas.getContext("2d");

var inversionCentre_000 = canvasWidth / 4;

var inversionCentre_001 = canvasHeight / 4;

var inversionCentre = /* tuple */[
  inversionCentre_000,
  inversionCentre_001
];

var inversionCircumference = /* record */[
  /* centre */inversionCentre,
  /* radius */120
];

function draw(state, canvas) {
  Draw$Inversion.clear(canvas);
  var ctx = canvas.getContext("2d");
  List.iter((function (p) {
          return Draw$Inversion.point(p, undefined, ctx);
        }), state[/* points */0]);
  List.iter((function (p) {
          return Draw$Inversion.point(Geometry$Inversion.inverseOfPoint(inversionCircumference, p), "red", ctx);
        }), state[/* points */0]);
  return List.iter((function (c) {
                return Draw$Inversion.circumference(c, undefined, ctx);
              }), state[/* circumferences */1]);
}

function addTo(state, point) {
  return /* record */[
          /* points : :: */[
            point,
            state[/* points */0]
          ],
          /* circumferences */state[/* circumferences */1]
        ];
}

function computeNextState(state, mouseControls) {
  var match = mouseControls[/* pressed */0];
  if (match) {
    return addTo(state, mouseControls[/* position */1]);
  } else {
    return state;
  }
}

function drawingLoop(state, mouseControls, canvas, param) {
  var nextState = computeNextState(state, mouseControls);
  draw(nextState, canvas);
  return requestAnimationFrame((function (param) {
                return drawingLoop(nextState, mouseControls, canvas, param);
              }));
}

var initialState_000 = /* points : :: */[
  inversionCentre,
  /* [] */0
];

var initialState_001 = /* circumferences : :: */[
  inversionCircumference,
  /* [] */0
];

var initialState = /* record */[
  initialState_000,
  initialState_001
];

var mouseControls = /* record */[
  /* pressed */false,
  /* position : tuple */[
    0,
    0
  ]
];

canvas.addEventListener("mousedown", (function (param) {
        mouseControls[/* pressed */0] = true;
        return /* () */0;
      }));

canvas.addEventListener("mouseup", (function (param) {
        mouseControls[/* pressed */0] = false;
        return /* () */0;
      }));

canvas.addEventListener("mousemove", (function (e) {
        mouseControls[/* position */1] = DomUtils$Inversion.getCursorCoords(canvas, e);
        return /* () */0;
      }));

drawingLoop(initialState, mouseControls, canvas, 0);

exports.canvas = canvas;
exports.canvasWidth = canvasWidth;
exports.canvasHeight = canvasHeight;
exports.screen = screen;
exports.inversionCentre = inversionCentre;
exports.inversionCircumference = inversionCircumference;
exports.draw = draw;
exports.addTo = addTo;
exports.computeNextState = computeNextState;
exports.drawingLoop = drawingLoop;
exports.initialState = initialState;
exports.mouseControls = mouseControls;
/* canvas Not a pure module */
