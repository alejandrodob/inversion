// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"src/Geometry.bs.js":[function(require,module,exports) {
// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var pi = Math.acos(-1);

function distance(param, param$1) {
  return Math.sqrt(Math.pow(param[0] - param$1[0], 2) + Math.pow(param[1] - param$1[1], 2));
}

function normalize(param) {
  var v2 = param[1];
  var v1 = param[0];
  var d = distance(
  /* tuple */
  [v1, v2],
  /* tuple */
  [0, 0]);

  if (d !== 0) {
    return (
      /* tuple */
      [v1 / d, v2 / d]
    );
  } else {
    return (
      /* tuple */
      [v1, v2]
    );
  }
}

function inverseOfPoint(param, param$1) {
  var centre = param[
  /* centre */
  0];
  var c2 = centre[1];
  var c1 = centre[0];
  var p2 = param$1[1];
  var p1 = param$1[0];
  var inverseDistance = Math.pow(param[
  /* radius */
  1], 2) / distance(
  /* tuple */
  [c1, c2],
  /* tuple */
  [p1, p2]);
  var match = normalize(
  /* tuple */
  [p1 - c1, p2 - c2]);
  return (
    /* tuple */
    [match[0] * inverseDistance + c1, match[1] * inverseDistance + c2]
  );
}

exports.pi = pi;
exports.distance = distance;
exports.normalize = normalize;
exports.inverseOfPoint = inverseOfPoint;
/* pi Not a pure module */
},{}],"src/Draw.bs.js":[function(require,module,exports) {
// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Geometry$Inversion = require("./Geometry.bs.js");

var defaultColor = "black";

function setDefaultStrokeStyle(ctx) {
  ctx.strokeStyle = defaultColor;
  return (
    /* () */
    0
  );
}

function setDefaultFillStyle(ctx) {
  ctx.fillStyle = defaultColor;
  return (
    /* () */
    0
  );
}

function circumference(param, $staropt$star, ctx) {
  var centre = param[
  /* centre */
  0];
  var color = $staropt$star !== undefined ? $staropt$star : defaultColor;
  ctx.strokeStyle = color;
  ctx.beginPath();
  ctx.arc(centre[0], centre[1], param[
  /* radius */
  1], 0, Geometry$Inversion.pi * 2, true);
  ctx.stroke();
  ctx.strokeStyle = defaultColor;
  return (
    /* () */
    0
  );
}

function segment(param, $staropt$star, ctx) {
  var match = param[1];
  var match$1 = param[0];
  var color = $staropt$star !== undefined ? $staropt$star : defaultColor;
  ctx.strokeStyle = color;
  ctx.beginPath();
  ctx.moveTo(match$1[0], match$1[1]);
  ctx.lineTo(match[0], match[1]);
  ctx.stroke();
  ctx.strokeStyle = defaultColor;
  return (
    /* () */
    0
  );
}

function point(param, $staropt$star, ctx) {
  var color = $staropt$star !== undefined ? $staropt$star : defaultColor;
  ctx.fillStyle = color;
  ctx.beginPath();
  ctx.arc(param[0], param[1], 1, 0, Geometry$Inversion.pi * 2, true);
  ctx.fill();
  ctx.fillStyle = defaultColor;
  return (
    /* () */
    0
  );
}

exports.defaultColor = defaultColor;
exports.setDefaultStrokeStyle = setDefaultStrokeStyle;
exports.setDefaultFillStyle = setDefaultFillStyle;
exports.circumference = circumference;
exports.segment = segment;
exports.point = point;
/* Geometry-Inversion Not a pure module */
},{"./Geometry.bs.js":"src/Geometry.bs.js"}],"src/Main.re":[function(require,module,exports) {
// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Draw$Inversion = require("./Draw.bs.js");

var Geometry$Inversion = require("./Geometry.bs.js");

var canvas = document.getElementById("screen");
var canvasWidth = canvas.width;
var canvasHeight = canvas.height;
var screen = canvas.getContext("2d");
var inversionCentre_000 = canvasWidth / 4;
var inversionCentre_001 = canvasHeight / 4;
var inversionCentre =
/* tuple */
[inversionCentre_000, inversionCentre_001];
var inversionCircumference =
/* record */
[
/* centre */
inversionCentre,
/* radius */
120];
Draw$Inversion.point(inversionCentre, undefined, screen);
Draw$Inversion.circumference(inversionCircumference, undefined, screen);
var a =
/* tuple */
[245, 345];
var a$prime = Geometry$Inversion.inverseOfPoint(inversionCircumference, a);
Draw$Inversion.point(a, "green", screen);
Draw$Inversion.point(a$prime, "red", screen);
exports.canvas = canvas;
exports.canvasWidth = canvasWidth;
exports.canvasHeight = canvasHeight;
exports.screen = screen;
exports.inversionCentre = inversionCentre;
exports.inversionCircumference = inversionCircumference;
exports.a = a;
exports.a$prime = a$prime;
/* canvas Not a pure module */
},{"./Draw.bs.js":"src/Draw.bs.js","./Geometry.bs.js":"src/Geometry.bs.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "49957" + '/');

  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      console.clear();
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] âœ¨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] ðŸš¨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">ðŸš¨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/Main.re"], null)
//# sourceMappingURL=/Main.3d3867db.map